# Dotli
---
[![Build Status](https://travis-ci.org/spacemanspiff2007/dotli.svg?branch=master)](https://travis-ci.com/spacemanspiff2007/dotli)
![PyPI - Python Version](https://img.shields.io/pypi/pyversions/dotli)

yet another library for flattening structures

## Installation
```bash
pip install dotli
```

## Usage

### flatten

```python
from dotli import Dotli

data = {
    'a': {
        'c': 'val1',
        'd': 'val2',
    },
    'b': {
        'c': 2,
        'd': {'key3': 'val3', 'key4': 'val4'},
    }
}

d = Dotli()                 # create an obj with a default configuration
flat = d.flatten(data)      # flatten
orig = d.unflatten(flat)    # unflatten
assert data == orig
print(flat)
```

```result:json
```

The separator can be configured
```python
from dotli import Dotli

data = {
    'a': {'c': 'd'},
    'b': {'e': 'f'}
}

d = Dotli(separator='-')
print(d.flatten(data))
```

```result:json
```

It is also possible to flatten lists and a mixture of lists and dicts

```python
from dotli import Dotli

data = {
    'a': {
        'c': [1, 2, 3],
        'd': ['e1', 'e2', 'e3'],
    },
    'b': 'h'
}

d = Dotli()
print(d.flatten(data))
```

```result:json
```

List indices can be wrapped in square brackets to allow numerical strings in dicts as keys

```python
from dotli import Dotli

data = {
    'a': {
        '1': [1, 2, 3],
        '2': ['e1', 'e2', 'e3'],
    },
    'b': 'h'
}

d = Dotli(list_brackets=True)
flat = d.flatten(data)
orig = d.unflatten(flat)
assert data == orig
print(flat)
```

```result:json
```


There will be a nice error message the dict can not be flattened including the path to the invalid element.

```python
from dotli import Dotli
from dotli.errors import SeparatorInKeyError

data = {
    'a': {
        'b.b': 1,
    },
    'b': 'h'
}
try:
    Dotli().flatten(data)
except SeparatorInKeyError as e:
    print(e)
```

```result
```

### unflatten

When elements are missing in a list Dotli will throw an error

```python
from dotli import Dotli
from dotli.errors import IncompleteListError

data = {
    'a.0': 0,
    'a.2': 2,
}
try:
    d = Dotli()
    d.unflatten(data)
except IncompleteListError as e:
    print(e)
```

```result
```

However it is possible to specify a fill value 
which will automatically be inserted into the list for missing entries

```python
from dotli import Dotli

data = {
    'a.0': 0,
    'a.2': 2,
}

d = Dotli(fill_value_list=None)
print(d.unflatten(data))
```

```result
```